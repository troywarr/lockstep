!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Lockstep=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],2:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1}],3:[function(_dereq_,module,exports){
var now = _dereq_('performance-now')
  , global = typeof window === 'undefined' ? {} : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = global['request' + suffix]
  , caf = global['cancel' + suffix] || global['cancelRequest' + suffix]
  , isNative = true

for(var i = 0; i < vendors.length && !raf; i++) {
  raf = global[vendors[i] + 'Request' + suffix]
  caf = global[vendors[i] + 'Cancel' + suffix]
      || global[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  isNative = false

  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  if(!isNative) {
    return raf.call(global, fn)
  }
  return raf.call(global, function() {
    try{
      fn.apply(this, arguments)
    } catch(e) {
      setTimeout(function() { throw e }, 0)
    }
  })
}
module.exports.cancel = function() {
  caf.apply(global, arguments)
}

},{"performance-now":4}],4:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.6.3
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

/*
//@ sourceMappingURL=performance-now.map
*/

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1}],5:[function(_dereq_,module,exports){
(function (process){
(function() {
  var Lockstep, MSQTY, NOOP, now, raf,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  raf = _dereq_('raf');

  now = _dereq_('performance-now');

  MSQTY = {};

  MSQTY.microseconds = 0.001;

  MSQTY.milliseconds = 1;

  MSQTY.seconds = 1000;

  MSQTY.minutes = MSQTY.seconds * 60;

  MSQTY.hours = MSQTY.minutes * 60;

  MSQTY.days = MSQTY.hours * 24;

  NOOP = function() {};

  Lockstep = (function() {
    var _isInt, _merge, _type;

    function Lockstep() {
      this._loop = __bind(this._loop, this);
      var options;
      options = this._checkArguments(arguments);
      this.settings = this._buildSettings(options);
      this.running = false;
      this.microseconds = this._hasHighResolutionTime();
      this.count = {
        start: 0,
        stop: 0,
        reset: 0
      };
      this.time = {
        start: null,
        stop: null,
        elapsed: 0
      };
    }

    _type = function(value) {
      return {}.toString.call(value).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };

    _isInt = function(value) {
      return !isNaN(value) && parseInt(Number(value)) === value && !isNaN(parseInt(value, 10));
    };

    _merge = function(obj1, obj2) {
      var name, obj3;
      obj3 = {};
      for (name in obj1) {
        obj3[name] = obj1[name];
      }
      for (name in obj2) {
        obj3[name] = obj2[name];
      }
      return obj3;
    };

    Lockstep.prototype._hasHighResolutionTime = function() {
      var _ref;
      return ((typeof window !== "undefined" && window !== null ? (_ref = window.performance) != null ? _ref.now : void 0 : void 0) != null) || ((typeof process !== "undefined" && process !== null ? process.hrtime : void 0) != null);
    };

    Lockstep.prototype._checkArguments = function(args) {
      var options;
      if (args.length === 0) {
        throw new Error('No arguments supplied.');
      } else if (args.length === 1) {
        if (this._type(args[0]) === 'function') {
          options = {
            step: args[0]
          };
        } else if (this._type(args[0]) === 'object') {
          if (this._type(args[0].step) === 'function') {
            options = args[0];
          } else {
            throw new Error('Bad arguments supplied (no valid "step" function).');
          }
        } else {
          throw new Error('Bad arguments supplied (wrong type).');
        }
      } else if (args.length >= 2) {
        if (this._type(args[0]) === 'object' && this._type(args[1]) === 'function') {
          if (args[0].step != null) {
            throw new Error('Bad arguments supplied (redundant "step" function).');
          } else {
            args[0].step = args[1];
            options = args[0];
          }
        } else {
          throw new Error('Bad arguments supplied (wrong type).');
        }
      }
      if (options.pad != null) {
        if (!(options.pad === false || this._isInt(options.pad))) {
          throw new Error('Bad arguments supplied ("pad" option must have a false or integer value).');
        }
      }
      return options;
    };

    Lockstep.prototype._buildSettings = function(options) {
      var defaults;
      defaults = {
        pad: false,
        floor: false
      };
      return this._merge(defaults, options);
    };

    Lockstep.prototype._millisecondsToClockTime = function(ms) {
      var clockTime, clockTimeMicroseconds;
      if (this.microseconds) {
        clockTimeMicroseconds = {
          microseconds: Math.floor((ms % 1) / MSQTY.microseconds)
        };
        ms = Math.floor(ms);
      }
      clockTime = {
        milliseconds: ms % 1000,
        seconds: Math.floor(ms / MSQTY.seconds) % 60,
        minutes: Math.floor(ms / MSQTY.minutes) % 60,
        hours: Math.floor(ms / MSQTY.hours) % 24,
        days: Math.floor(ms / MSQTY.days)
      };
      return this._merge(clockTime, clockTimeMicroseconds != null ? clockTimeMicroseconds : {});
    };

    Lockstep.prototype._millisecondsToElapsedTime = function(ms) {
      var clockTime, clockTimeMicroseconds;
      if (this.microseconds) {
        clockTimeMicroseconds = {
          microseconds: ms / MSQTY.microseconds
        };
      }
      clockTime = {
        milliseconds: ms,
        seconds: ms / MSQTY.seconds,
        minutes: ms / MSQTY.minutes,
        hours: ms / MSQTY.hours,
        days: ms / MSQTY.days
      };
      return this._merge(clockTime, clockTimeMicroseconds != null ? clockTimeMicroseconds : {});
    };

    Lockstep.prototype._elapsedTimeToMilliseconds = function(elapsedTime) {
      return elapsedTime.milliseconds;
    };

    Lockstep.prototype._clockTimeToMilliseconds = function(clockTime) {
      var key, ms, val;
      ms = 0;
      for (key in clockTime) {
        val = clockTime[key];
        ms += val * MSQTY[key];
      }
      return ms;
    };

    Lockstep.prototype._loop = function() {
      this.pulse = raf(this._loop);
      return this._step();
    };

    Lockstep.prototype._step = function() {
      return this.settings.step(this.getInfo());
    };

    Lockstep.prototype._pad = function(int, length) {
      int += '';
      if (int.length >= length) {
        return int;
      } else {
        return "" + (new Array(length - int.length + 1).join('0')) + "int";
      }
    };

    Lockstep.prototype.start = function(callback) {
      if (callback == null) {
        callback = this.settings.start;
      }
      if (!this.running) {
        this.time.start = performance.now();
        this.count.start++;
        this.running = true;
        this._loop();
        if (typeof callback === "function") {
          callback(this.getInfo());
        }
      }
      return this;
    };

    Lockstep.prototype.stop = function(callback) {
      if (callback == null) {
        callback = this.settings.stop;
      }
      if (this.running) {
        raf.cancel(this.pulse);
        this.time.stop = performance.now();
        this.time.elapsed += this.time.stop - this.time.start;
        this.count.stop++;
        this.running = false;
        this._step();
        if (typeof callback === "function") {
          callback(this.getInfo());
        }
      }
      return this;
    };

    Lockstep.prototype.reset = function(callback, count) {
      var key, val;
      if (callback == null) {
        callback = this.settings.reset;
      }
      if (this.time.elapsed > 0) {
        this.count.reset++;
        this.time.start = performance.now();
        this.time.stop = null;
        this.time.elapsed = 0;
        if ((function() {
          var _ref, _results;
          _ref = this.time;
          _results = [];
          for (key in _ref) {
            val = _ref[key];
            _results.push(count && val > 0);
          }
          return _results;
        }).call(this)) {
          this.count.start = 0;
          this.count.stop = 0;
          this.count.reset = 0;
        }
        if (typeof callback === "function") {
          callback(this.getInfo());
        }
      }
      return this;
    };

    Lockstep.prototype.add = function(milliseconds) {
      return this;
    };

    Lockstep.prototype.subtract = function(milliseconds) {
      return this;
    };

    Lockstep.prototype.getInfo = function() {
      var clock, elapsed, key, milliseconds, val;
      milliseconds = this.running ? this.time.elapsed + performance.now() - this.time.start : this.time.elapsed;
      elapsed = this._millisecondsToElapsedTime(milliseconds);
      clock = this._millisecondsToClockTime(milliseconds);
      if (this.settings.floor) {
        for (key in elapsed) {
          val = elapsed[key];
          elapsed = Math.floor(val);
        }
      }
      if (this.settings.pad) {
        for (key in clock) {
          val = clock[key];
          val = this._pad(val, this.settings.pad);
        }
      }
      return {
        time: {
          elapsed: elapsed,
          clock: clock
        },
        count: this.count
      };
    };

    Lockstep.prototype.setInfo = function(info) {
      return this;
    };

    Lockstep.prototype.when = function(time, callback) {
      return this;
    };

    Lockstep.prototype.every = function(time, callback) {
      return this;
    };

    Lockstep.prototype["while"] = function(startTime, endTime, callback) {
      return this;
    };

    Lockstep.prototype.during = function(startTime, endTime, startCallback, endCallback) {
      return this;
    };

    Lockstep.prototype.beginning = function(startTime, startCallback) {
      this.during(startTime, Infinity, startCallback, NOOP);
      return this;
    };

    Lockstep.prototype.ending = function(endTime, endCallback) {
      return this;
    };

    return Lockstep;

  })();

  module.exports = Lockstep;

}).call(this);

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1,"performance-now":2,"raf":3}]},{},[5])
//# sourceMappingURL=data:application/json;base64,
(5)
});
