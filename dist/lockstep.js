!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Lockstep=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],2:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1}],3:[function(_dereq_,module,exports){
var now = _dereq_('performance-now')
  , global = typeof window === 'undefined' ? {} : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = global['request' + suffix]
  , caf = global['cancel' + suffix] || global['cancelRequest' + suffix]
  , isNative = true

for(var i = 0; i < vendors.length && !raf; i++) {
  raf = global[vendors[i] + 'Request' + suffix]
  caf = global[vendors[i] + 'Cancel' + suffix]
      || global[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  isNative = false

  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  if(!isNative) {
    return raf.call(global, fn)
  }
  return raf.call(global, function() {
    try{
      fn.apply(this, arguments)
    } catch(e) {
      setTimeout(function() { throw e }, 0)
    }
  })
}
module.exports.cancel = function() {
  caf.apply(global, arguments)
}

},{"performance-now":4}],4:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.6.3
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

/*
//@ sourceMappingURL=performance-now.map
*/

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1}],5:[function(_dereq_,module,exports){
(function (process){
(function() {
  var COUNTS, ERRMSG, INFO, Lockstep, MEASURES, MSQTY, NOOP, TIMES, now, raf,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  raf = _dereq_('raf');

  now = _dereq_('performance-now');

  MSQTY = {};

  MSQTY.microseconds = 0.001;

  MSQTY.milliseconds = MSQTY.microseconds * 1000;

  MSQTY.seconds = MSQTY.milliseconds * 1000;

  MSQTY.minutes = MSQTY.seconds * 60;

  MSQTY.hours = MSQTY.minutes * 60;

  MSQTY.days = MSQTY.hours * 24;

  MEASURES = ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'days'];

  TIMES = ['elapsed', 'clock'];

  COUNTS = ['start', 'stop', 'reset'];

  INFO = ['elapsed', 'clock', 'count'];

  ERRMSG = {
    noArguments: 'No arguments supplied.',
    options: {
      bad: {
        oneArgument: 'Argument supplied is not a callback function or options object.',
        twoArguments: 'Arguments supplied are not a callback function followed by an options object.'
      },
      step: {
        missing: 'Options supplied are incomplete (no valid "step" function).',
        redundant: 'Options supplied are invalid (redundant "step" function).'
      },
      pad: {
        bad: 'Options supplied are invalid ("pad" option must have a false or integer value).'
      }
    },
    callback: {
      bad: 'Callback supplied is not a function.',
      missing: 'No callback supplied.'
    },
    startCallback: {
      bad: 'Start callback is not a function.',
      missing: 'No start callback supplied.'
    },
    endCallback: {
      bad: 'End callback is not a function.',
      missing: 'No end callback supplied.'
    },
    time: {
      bad: 'Time supplied is not valid.'
    },
    startTime: {
      bad: 'Start time supplied is not valid.'
    },
    endTime: {
      bad: 'End time supplied is not valid.',
      missing: 'No end time supplied.'
    },
    info: {
      bad: 'Info supplied is not valid.'
    }
  };

  NOOP = function() {};

  Lockstep = (function() {
    function Lockstep() {
      this._loop = __bind(this._loop, this);
      var options;
      options = this._validateOptions(arguments);
      this.settings = this._buildSettings(options);
      this.running = false;
      this.microseconds = this._hasHighResolutionTime();
      this.count = {
        start: 0,
        stop: 0,
        reset: 0
      };
      this.time = {
        running: 0,
        stored: 0,
        last: {
          start: null,
          stop: null,
          reset: null
        }
      };
    }

    Lockstep.prototype._merge = function(obj1, obj2) {
      var name, obj3;
      obj3 = {};
      for (name in obj1) {
        obj3[name] = obj1[name];
      }
      for (name in obj2) {
        obj3[name] = obj2[name];
      }
      return obj3;
    };

    Lockstep.prototype._pad = function(int, length) {
      int += '';
      if (int.length >= length) {
        return int;
      } else {
        return "" + (new Array(length - int.length + 1).join('0')) + int;
      }
    };

    Lockstep.prototype._type = function(value) {
      return {}.toString.call(value).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };

    Lockstep.prototype._isInt = function(value) {
      return !isNaN(value) && parseInt(Number(value)) === value && !isNaN(parseInt(value, 10));
    };

    Lockstep.prototype._isEmpty = function(obj) {
      var key;
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        return false;
      }
      return true;
    };

    Lockstep.prototype._hasHighResolutionTime = function() {
      var _ref;
      return ((typeof window !== "undefined" && window !== null ? (_ref = window.performance) != null ? _ref.now : void 0 : void 0) != null) || ((typeof process !== "undefined" && process !== null ? process.hrtime : void 0) != null);
    };

    Lockstep.prototype._isValidTime = function(time) {
      var key, key2, oneTimeType, val, val2;
      if (!this._type(time) === 'object') {
        return false;
      }
      oneTimeType = false;
      for (key in time) {
        val = time[key];
        if (oneTimeType) {
          return false;
        } else {
          oneTimeType = true;
        }
        if (!(__indexOf.call(TIMES, key) >= 0 && this._type(val) === 'object')) {
          return false;
        }
        for (key2 in val) {
          val2 = val[key2];
          if (!(__indexOf.call(MEASURES, key2) >= 0 && this._type(val2) === 'number')) {
            return false;
          }
        }
      }
      return true;
    };

    Lockstep.prototype._isValidCount = function(count) {
      var key, val;
      for (key in count) {
        val = count[key];
        if (!(__indexOf.call(COUNTS, key) >= 0 && this._isInt(val))) {
          return false;
        }
      }
      return true;
    };

    Lockstep.prototype._isValidInfo = function(info) {
      var key, time, val;
      time = {};
      for (key in info) {
        val = info[key];
        if (__indexOf.call(TIMES, key) >= 0) {
          time[key] = val;
        } else if (key === 'count') {
          if (!this._isValidCount(val)) {
            return false;
          }
        } else {
          return false;
        }
      }
      if (!this._isEmpty(time)) {
        if (!this._isValidTime(time)) {
          return false;
        }
      }
      return true;
    };

    Lockstep.prototype._validateOptions = function(args) {
      var options;
      if (args.length === 0) {
        throw new Error(ERRMSG.noArguments);
      } else if (args.length === 1) {
        if (this._type(args[0]) === 'function') {
          options = {
            step: args[0]
          };
        } else if (this._type(args[0]) === 'object') {
          if (this._type(args[0].step) === 'function') {
            options = args[0];
          } else {
            throw new Error(ERRMSG.options.step.missing);
          }
        } else {
          throw new Error(ERRMSG.options.bad.oneArgument);
        }
      } else if (args.length >= 2) {
        if (this._type(args[0]) === 'object' && this._type(args[1]) === 'function') {
          if (args[0].step != null) {
            throw new Error(ERRMSG.options.step.redundant);
          } else {
            args[0].step = args[1];
            options = args[0];
          }
        } else {
          throw new Error(ERRMSG.options.bad.twoArguments);
        }
      }
      if (options.pad != null) {
        if (!(options.pad === false || this._isInt(options.pad))) {
          throw new Error(ERRMSG.options.pad.bad);
        }
      }
      return options;
    };

    Lockstep.prototype._validateArguments = function(argArray) {
      var argInfo, errorMessageBad, errorMessageMissing, validator, value, _i, _len;
      for (_i = 0, _len = argArray.length; _i < _len; _i++) {
        argInfo = argArray[_i];
        value = argInfo[0];
        validator = argInfo[1];
        errorMessageBad = argInfo[2];
        errorMessageMissing = argInfo[3];
        if (value != null) {
          if (this._type(validator) === 'function') {
            if (!validator(value)) {
              throw new Error(errorMessageBad);
            }
          } else if (this._type(validator) === 'string') {
            switch (validator) {
              case 'time':
                if (!this._isValidTime(value)) {
                  throw new Error(errorMessageBad);
                }
                break;
              case 'info':
                if (!this._isValidInfo(value)) {
                  throw new Error(errorMessageBad);
                }
                break;
              case 'count':
                if (!this._isValidCount(value)) {
                  throw new Error(errorMessageBad);
                }
                break;
              default:
                if (this._type(value) !== validator) {
                  throw new Error(errorMessageBad);
                }
            }
          }
        } else if (errorMessageMissing != null) {
          throw new Error(errorMessageMissing);
        }
      }
    };

    Lockstep.prototype._buildSettings = function(options) {
      var defaults;
      defaults = {
        pad: false,
        floor: false
      };
      return this._merge(defaults, options);
    };

    Lockstep.prototype._runTimeToElapsedTime = function(runTime) {
      var elapsedTime, milliseconds;
      elapsedTime = {};
      if (this.microseconds) {
        elapsedTime.microseconds = runTime / MSQTY.microseconds;
        milliseconds = runTime;
      } else {
        milliseconds = runTime;
      }
      elapsedTime.milliseconds = milliseconds;
      elapsedTime.seconds = milliseconds / MSQTY.seconds;
      elapsedTime.minutes = milliseconds / MSQTY.minutes;
      elapsedTime.hours = milliseconds / MSQTY.hours;
      elapsedTime.days = milliseconds / MSQTY.days;
      return elapsedTime;
    };

    Lockstep.prototype._runTimeToClockTime = function(runTime) {
      var clockTime, milliseconds;
      clockTime = {};
      if (this.microseconds) {
        clockTime.microseconds = Math.floor((runTime % 1) / MSQTY.microseconds);
        milliseconds = Math.floor(runTime);
      } else {
        milliseconds = runTime;
      }
      clockTime.milliseconds = milliseconds % 1000;
      clockTime.seconds = Math.floor(milliseconds / MSQTY.seconds) % 60;
      clockTime.minutes = Math.floor(milliseconds / MSQTY.minutes) % 60;
      clockTime.hours = Math.floor(milliseconds / MSQTY.hours) % 24;
      clockTime.days = Math.floor(milliseconds / MSQTY.days);
      return clockTime;
    };

    Lockstep.prototype._elapsedTimeToRunTime = function(elapsedTime) {
      var key, runTime, val;
      runTime = 0;
      for (key in elapsedTime) {
        val = elapsedTime[key];
        runTime = MSQTY[key] * val;
      }
      return runTime;
    };

    Lockstep.prototype._clockTimeToRunTime = function(clockTime) {
      var key, runTime, val;
      runTime = 0;
      for (key in clockTime) {
        val = clockTime[key];
        runTime += MSQTY[key] * val;
      }
      return runTime;
    };

    Lockstep.prototype._getInfo = function() {
      var clock, elapsed, key, totalTime, val;
      totalTime = this.time.stored + this.time.running;
      elapsed = this._runTimeToElapsedTime(totalTime);
      clock = this._runTimeToClockTime(totalTime);
      if (this.settings.floor) {
        for (key in elapsed) {
          val = elapsed[key];
          elapsed = Math.floor(val);
        }
      }
      if (this.settings.pad) {
        for (key in clock) {
          val = clock[key];
          val = this._pad(val, this.settings.pad);
        }
      }
      return {
        time: {
          elapsed: elapsed,
          clock: clock
        },
        count: this.count
      };
    };

    Lockstep.prototype._adjustTime = function(operation, runTime) {
      var called;
      called = now();
      this.time.last.start = called;
      this.time.running = 0;
      switch (operation) {
        case 'set':
          this.time.stored = runTime;
          break;
        case 'add':
          this.time.stored += runTime;
          break;
        case 'subtract':
          this.time.stored -= runTime;
      }
      if (!this.settings.allowNegative) {
        return this.time.stored = Math.max(this.time.stored, 0);
      }
    };

    Lockstep.prototype._adjustCount = function(operation, count) {
      var key, val;
      for (key in count) {
        val = count[key];
        switch (operation) {
          case 'set':
            this.count[key] = val;
            break;
          case 'add':
            this.count[key] += val;
            break;
          case 'subtract':
            this.count[key] -= val;
        }
        if (!this.settings.allowNegative) {
          this.count[key] = Math.max(this.count[key], 0);
        }
      }
    };

    Lockstep.prototype._adjustInfo = function(operation, info) {
      if (info.elapsed != null) {
        this._adjustTime(operation, this._elapsedTimeToRunTime(info.elapsed));
      }
      if (info.clock != null) {
        this._adjustTime(operation, this._clockTimeToRunTime(info.clock));
      }
      if (info.count != null) {
        return this._adjustCount(operation, info.count);
      }
    };

    Lockstep.prototype._loop = function() {
      this.pulse = raf(this._loop);
      return this._step();
    };

    Lockstep.prototype._step = function(timeNow) {
      if (timeNow == null) {
        timeNow = now();
      }
      this.time.running = timeNow - this.time.last.start;
      return this.settings.step(this._getInfo());
    };

    Lockstep.prototype.start = function(callback) {
      var called;
      if (callback == null) {
        callback = this.settings.start;
      }
      called = now();
      this._validateArguments([[callback, 'function', ERRMSG.callback.bad]]);
      if (!this.running) {
        this.count.start++;
        this.running = true;
        this.time.last.start = called;
        this._loop();
        if (typeof callback === "function") {
          callback(this._getInfo());
        }
      }
      return this;
    };

    Lockstep.prototype.stop = function(callback) {
      var called;
      if (callback == null) {
        callback = this.settings.stop;
      }
      called = now();
      this._validateArguments([[callback, 'function', ERRMSG.callback.bad]]);
      if (this.running) {
        raf.cancel(this.pulse);
        this.count.stop++;
        this.running = false;
        this.time.last.stop = called;
        this._step(called);
        this.time.stored += this.time.running;
        this.time.running = 0;
        if (typeof callback === "function") {
          callback(this._getInfo());
        }
      }
      return this;
    };

    Lockstep.prototype.reset = function(callback, count) {
      var callbackEligible, called, key, val, _ref;
      if (callback == null) {
        callback = this.settings.reset;
      }
      called = now();
      this._validateArguments([[callback, 'function', ERRMSG.callback.bad]]);
      if (this.time.running > 0 || this.time.stored > 0) {
        callbackEligible = true;
        this.time.running = this.time.stored = 0;
        this.count.reset++;
        this.time.last.reset = this.time.last.start = called;
        this.time.last.stop = null;
      }
      if (count) {
        _ref = this.count;
        for (key in _ref) {
          val = _ref[key];
          if (val > 0) {
            callbackEligible = true;
            this.count.start = 0;
            this.count.stop = 0;
            this.count.reset = 0;
            break;
          }
        }
      }
      callbackEligible && (typeof callback === "function" ? callback(this._getInfo()) : void 0);
      return this;
    };

    Lockstep.prototype.info = function(info, callback) {
      if (callback == null) {
        callback = this.settings.info;
      }
      if (info != null) {
        this._validateArguments([[info, 'info', ERRMSG.info.bad, ERRMSG.noArguments], [callback, 'function', ERRMSG.callback.bad]]);
        this._adjustInfo('set', info);
        if (typeof callback === "function") {
          callback(this._getInfo());
        }
        return this;
      } else {
        return this._getInfo();
      }
    };

    Lockstep.prototype.add = function(info, callback) {
      if (callback == null) {
        callback = this.settings.add;
      }
      this._validateArguments([[info, 'info', ERRMSG.info.bad, ERRMSG.noArguments], [callback, 'function', ERRMSG.callback.bad]]);
      this._adjustInfo('add', info);
      if (typeof callback === "function") {
        callback(this._getInfo());
      }
      return this;
    };

    Lockstep.prototype.subtract = function(info, callback) {
      if (callback == null) {
        callback = this.settings.subtract;
      }
      this._validateArguments([[info, 'info', ERRMSG.info.bad, ERRMSG.noArguments], [callback, 'function', ERRMSG.callback.bad]]);
      this._adjustInfo('subtract', info);
      if (typeof callback === "function") {
        callback(this._getInfo());
      }
      return this;
    };

    Lockstep.prototype.when = function(time, callback) {
      if (callback == null) {
        callback = this.settings.when;
      }
      this._validateArguments([[time, 'time', ERRMSG.time.bad, ERRMSG.noArguments], [callback, 'function', ERRMSG.callback.bad, ERRMSG.callback.missing]]);
      return this;
    };

    Lockstep.prototype.every = function(time, callback) {
      if (callback == null) {
        callback = this.settings.every;
      }
      this._validateArguments([[time, 'time', ERRMSG.time.bad, ERRMSG.noArguments], [callback, 'function', ERRMSG.callback.bad, ERRMSG.callback.missing]]);
      return this;
    };

    Lockstep.prototype["while"] = function(startTime, endTime, callback) {
      if (callback == null) {
        callback = this.settings["while"];
      }
      this._validateArguments([[startTime, 'time', ERRMSG.startTime.bad, ERRMSG.noArguments], [endTime, 'time', ERRMSG.endTime.bad, ERRMSG.endTime.missing], [callback, 'function', ERRMSG.callback.bad, ERRMSG.callback.missing]]);
      return this;
    };

    Lockstep.prototype.during = function(startTime, endTime, startCallback, endCallback) {
      if (startCallback == null) {
        startCallback = this.settings.duringStart;
      }
      if (endCallback == null) {
        endCallback = this.settings.duringEnd;
      }
      this._validateArguments([[startTime, 'time', ERRMSG.startTime.bad, ERRMSG.noArguments], [endTime, 'time', ERRMSG.endTime.bad, ERRMSG.endTime.missing], [startCallback, 'function', ERRMSG.startCallback.bad, ERRMSG.startCallback.missing], [endCallback, 'function', ERRMSG.endCallback.bad, ERRMSG.endCallback.missing]]);
      return this;
    };

    Lockstep.prototype.beginning = function(startTime, startCallback) {
      if (startCallback == null) {
        startCallback = this.settings.beginning;
      }
      this._validateArguments([[startTime, 'time', ERRMSG.startTime.bad, ERRMSG.noArguments], [startCallback, 'function', ERRMSG.startCallback.bad, ERRMSG.startCallback.missing]]);
      this.during(startTime, Infinity, startCallback, NOOP);
      return this;
    };

    Lockstep.prototype.ending = function(endTime, endCallback) {
      if (endCallback == null) {
        endCallback = this.settings.ending;
      }
      this._validateArguments([[endTime, 'time', ERRMSG.time.bad, ERRMSG.noArguments], [endCallback, 'function', ERRMSG.endCallback.bad, ERRMSG.endCallback.missing]]);
      return this;
    };

    return Lockstep;

  })();

  module.exports = Lockstep;

}).call(this);

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1,"performance-now":2,"raf":3}]},{},[5])
//# sourceMappingURL=data:application/json;base64,
(5)
});
