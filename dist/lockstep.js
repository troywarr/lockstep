!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Lockstep=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],2:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1}],3:[function(_dereq_,module,exports){
var now = _dereq_('performance-now')
  , global = typeof window === 'undefined' ? {} : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = global['request' + suffix]
  , caf = global['cancel' + suffix] || global['cancelRequest' + suffix]
  , isNative = true

for(var i = 0; i < vendors.length && !raf; i++) {
  raf = global[vendors[i] + 'Request' + suffix]
  caf = global[vendors[i] + 'Cancel' + suffix]
      || global[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  isNative = false

  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  if(!isNative) {
    return raf.call(global, fn)
  }
  return raf.call(global, function() {
    try{
      fn.apply(this, arguments)
    } catch(e) {
      setTimeout(function() { throw e }, 0)
    }
  })
}
module.exports.cancel = function() {
  caf.apply(global, arguments)
}

},{"performance-now":4}],4:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.6.3
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

/*
//@ sourceMappingURL=performance-now.map
*/

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1}],5:[function(_dereq_,module,exports){
(function (process){
(function() {
  var COUNTS, INFO, Lockstep, MEASURES, MSQTY, NOOP, TIMES, now, raf,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  raf = _dereq_('raf');

  now = _dereq_('performance-now');

  MSQTY = {};

  MSQTY.microseconds = 0.001;

  MSQTY.milliseconds = MSQTY.microseconds * 1000;

  MSQTY.seconds = MSQTY.milliseconds * 1000;

  MSQTY.minutes = MSQTY.seconds * 60;

  MSQTY.hours = MSQTY.minutes * 60;

  MSQTY.days = MSQTY.hours * 24;

  NOOP = function() {};

  MEASURES = ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'days'];

  TIMES = ['elapsed', 'clock'];

  COUNTS = ['start', 'stop', 'reset'];

  INFO = ['elapsed', 'clock', 'count'];

  Lockstep = (function() {
    function Lockstep() {
      this._loop = __bind(this._loop, this);
      var options;
      options = this._validateOptions(arguments);
      this.settings = this._buildSettings(options);
      this.running = false;
      this.microseconds = this._hasHighResolutionTime();
      this.count = {
        start: 0,
        stop: 0,
        reset: 0
      };
      this.time = {
        start: null,
        stop: null,
        run: 0
      };
    }

    Lockstep.prototype._type = function(value) {
      return {}.toString.call(value).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };

    Lockstep.prototype._isInt = function(value) {
      return !isNaN(value) && parseInt(Number(value)) === value && !isNaN(parseInt(value, 10));
    };

    Lockstep.prototype._merge = function(obj1, obj2) {
      var name, obj3;
      obj3 = {};
      for (name in obj1) {
        obj3[name] = obj1[name];
      }
      for (name in obj2) {
        obj3[name] = obj2[name];
      }
      return obj3;
    };

    Lockstep.prototype._pad = function(int, length) {
      int += '';
      if (int.length >= length) {
        return int;
      } else {
        return "" + (new Array(length - int.length + 1).join('0')) + int;
      }
    };

    Lockstep.prototype._hasHighResolutionTime = function() {
      var _ref;
      return ((typeof window !== "undefined" && window !== null ? (_ref = window.performance) != null ? _ref.now : void 0 : void 0) != null) || ((typeof process !== "undefined" && process !== null ? process.hrtime : void 0) != null);
    };

    Lockstep.prototype._isValidTime = function(time) {
      var key, key2, oneTimeType, val, val2;
      oneTimeType = false;
      if (!this._type(time) === 'object') {
        return false;
      }
      for (key in time) {
        val = time[key];
        if (oneTimeType) {
          return false;
        } else {
          oneTimeType = true;
        }
        if (!(__indexOf.call(TIMES, key) >= 0 && this._type(val) === 'object')) {
          return false;
        }
        for (key2 in val) {
          val2 = val[key2];
          if (!(__indexOf.call(MEASURES, key2) >= 0 && this._type(val2) === 'number')) {
            return false;
          }
        }
      }
      return true;
    };

    Lockstep.prototype._isValidCount = function(count) {
      var key, val;
      for (key in count) {
        val = count[key];
        if (!(__indexOf.call(COUNTS, key) >= 0 && this._isInt(val))) {
          return false;
        }
      }
      return true;
    };

    Lockstep.prototype._isValidInfo = function(info) {
      var key, val;
      for (key in info) {
        val = info[key];
        if (__indexOf.call(TIMES, key) >= 0) {
          if (!this._isValidTime(val)) {
            return false;
          }
        } else if (key === 'count') {
          if (!this._isValidCount(val)) {
            return false;
          }
        } else {
          return false;
        }
      }
      return true;
    };

    Lockstep.prototype._validateArguments = function(argArray) {
      var argInfo, errorMessageBad, errorMessageMissing, validator, value, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = argArray.length; _i < _len; _i++) {
        argInfo = argArray[_i];
        value = argInfo[0];
        validator = argInfo[1];
        errorMessageBad = argInfo[2];
        errorMessageMissing = argInfo[3];
        if (value != null) {
          if (this._type(validator) === 'function') {
            if (!validator(value)) {
              throw new Error(errorMessageBad);
            } else {
              _results.push(void 0);
            }
          } else if (this._type(validator) === 'string') {
            switch (validator) {
              case 'time':
                if (!this._isValidTime(value)) {
                  throw new Error(errorMessageBad);
                } else {
                  _results.push(void 0);
                }
                break;
              case 'info':
                if (!this._isValidInfo(value)) {
                  throw new Error(errorMessageBad);
                } else {
                  _results.push(void 0);
                }
                break;
              case 'count':
                if (!this._isValidCount(value)) {
                  throw new Error(errorMessageBad);
                } else {
                  _results.push(void 0);
                }
                break;
              default:
                if (this._type(value) !== validator) {
                  throw new Error(errorMessageBad);
                } else {
                  _results.push(void 0);
                }
            }
          } else {
            _results.push(void 0);
          }
        } else if (errorMessageMissing != null) {
          throw new Error(errorMessageMissing);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Lockstep.prototype._validateOptions = function(args) {
      var options;
      if (args.length === 0) {
        throw new Error('No arguments supplied.');
      } else if (args.length === 1) {
        if (this._type(args[0]) === 'function') {
          options = {
            step: args[0]
          };
        } else if (this._type(args[0]) === 'object') {
          if (this._type(args[0].step) === 'function') {
            options = args[0];
          } else {
            throw new Error('Bad arguments supplied (no valid "step" function).');
          }
        } else {
          throw new Error('Bad arguments supplied (wrong type).');
        }
      } else if (args.length >= 2) {
        if (this._type(args[0]) === 'object' && this._type(args[1]) === 'function') {
          if (args[0].step != null) {
            throw new Error('Bad arguments supplied (redundant "step" function).');
          } else {
            args[0].step = args[1];
            options = args[0];
          }
        } else {
          throw new Error('Bad arguments supplied (wrong type).');
        }
      }
      if (options.pad != null) {
        if (!(options.pad === false || this._isInt(options.pad))) {
          throw new Error('Bad arguments supplied ("pad" option must have a false or integer value).');
        }
      }
      return options;
    };

    Lockstep.prototype._buildSettings = function(options) {
      var defaults;
      defaults = {
        pad: false,
        floor: false
      };
      return this._merge(defaults, options);
    };

    Lockstep.prototype._runTimeToClockTime = function(runTime) {
      var clockTime, milliseconds;
      clockTime = {};
      if (this.microseconds) {
        clockTime.microseconds = Math.floor((runTime % 1) / MSQTY.microseconds);
        milliseconds = Math.floor(runTime);
      } else {
        milliseconds = runTime;
      }
      clockTime.milliseconds = milliseconds % 1000;
      clockTime.seconds = Math.floor(milliseconds / MSQTY.seconds) % 60;
      clockTime.minutes = Math.floor(milliseconds / MSQTY.minutes) % 60;
      clockTime.hours = Math.floor(milliseconds / MSQTY.hours) % 24;
      clockTime.days = Math.floor(milliseconds / MSQTY.days);
      return clockTime;
    };

    Lockstep.prototype._runTimeToElapsedTime = function(runTime) {
      var elapsedTime, milliseconds;
      elapsedTime = {};
      if (this.microseconds) {
        elapsedTime.microseconds = runTime / MSQTY.microseconds;
        milliseconds = runTime;
      } else {
        milliseconds = runTime;
      }
      elapsedTime.milliseconds = milliseconds;
      elapsedTime.seconds = milliseconds / MSQTY.seconds;
      elapsedTime.minutes = milliseconds / MSQTY.minutes;
      elapsedTime.hours = milliseconds / MSQTY.hours;
      elapsedTime.days = milliseconds / MSQTY.days;
      return elapsedTime;
    };

    Lockstep.prototype._elapsedTimeToRunTime = function(elapsedTime) {
      var key, propQty, runTime, val;
      propQty = 0;
      runTime = 0;
      for (key in elapsedTime) {
        val = elapsedTime[key];
        if (++propQty > 1) {
          throw new Error('Bad arguments supplied (too many properties).');
        }
        if (__indexOf.call(MEASURES, key) >= 0) {
          runTime = MSQTY[key] * val;
        } else {
          throw new Error('Bad arguments supplied (wrong property).');
        }
      }
      return runTime;
    };

    Lockstep.prototype._clockTimeToRunTime = function(clockTime) {
      var key, runTime, val;
      runTime = 0;
      for (key in clockTime) {
        val = clockTime[key];
        if (__indexOf.call(MEASURES, key) >= 0) {
          runTime += MSQTY[key] * val;
        } else {
          throw new Error('Bad arguments supplied (wrong property).');
        }
      }
      return runTime;
    };

    Lockstep.prototype._getInfo = function() {
      var clock, elapsed, key, runTime, val;
      runTime = this.running ? this.time.run + now() - this.time.start : this.time.run;
      elapsed = this._runTimeToElapsedTime(runTime);
      clock = this._runTimeToClockTime(runTime);
      if (this.settings.floor) {
        for (key in elapsed) {
          val = elapsed[key];
          elapsed = Math.floor(val);
        }
      }
      if (this.settings.pad) {
        for (key in clock) {
          val = clock[key];
          val = this._pad(val, this.settings.pad);
        }
      }
      return {
        time: {
          elapsed: elapsed,
          clock: clock
        },
        count: this.count
      };
    };

    Lockstep.prototype._adjustRunTime = function(operation, runTime) {
      switch (operation) {
        case 'set':
          this.time.run = runTime;
          break;
        case 'add':
          this.time.run += runTime;
          break;
        case 'subtract':
          this.time.run -= runTime;
          break;
        default:
          throw new Error('Bad arguments supplied (invalid operation).');
      }
      if (!this.settings.allowNegative) {
        return this.time.run = Math.max(this.time.run, 0);
      }
    };

    Lockstep.prototype._adjustCount = function(operation, count) {
      var key, val;
      for (key in count) {
        val = count[key];
        if (key === 'start' || key === 'stop' || key === 'reset') {
          if (this._isInt(val)) {
            switch (operation) {
              case 'set':
                this.count[key] = val;
                break;
              case 'add':
                this.count[key] += val;
                break;
              case 'subtract':
                this.count[key] -= val;
                break;
              default:
                throw new Error('Bad arguments supplied (invalid operation).');
            }
            if (!this.settings.allowNegative) {
              this.count[key] = Math.max(this.count[key], 0);
            }
          } else {
            throw new Error('Bad arguments supplied (count value is not an integer).');
          }
        } else {
          throw new Error('Bad arguments supplied (wrong property).');
        }
      }
    };

    Lockstep.prototype._adjustInfo = function(operation, info) {
      if (info.elapsed != null) {
        this._adjustRunTime(operation, this._elapsedTimeToRunTime(info.elapsed));
      }
      if (info.clock != null) {
        this._adjustRunTime(operation, this._clockTimeToRunTime(info.clock));
      }
      if (info.count != null) {
        return this._adjustCount(operation, info.count);
      }
    };

    Lockstep.prototype._loop = function() {
      this.pulse = raf(this._loop);
      return this._step();
    };

    Lockstep.prototype._step = function() {
      return this.settings.step(this._getInfo());
    };

    Lockstep.prototype.start = function(callback) {
      if (callback == null) {
        callback = this.settings.start;
      }
      this._validateArguments([[callback, 'function', 'Callback supplied is not a function.']]);
      if (!this.running) {
        this.count.start++;
        this.running = true;
        this.time.start = now();
        this._loop();
        if (typeof callback === "function") {
          callback(this._getInfo());
        }
      }
      return this;
    };

    Lockstep.prototype.stop = function(callback) {
      if (callback == null) {
        callback = this.settings.stop;
      }
      this._validateArguments([[callback, 'function', 'Callback supplied is not a function.']]);
      if (this.running) {
        raf.cancel(this.pulse);
        this.time.stop = now();
        this.time.run += this.time.stop - this.time.start;
        this.count.stop++;
        this.running = false;
        this._step();
        if (typeof callback === "function") {
          callback(this._getInfo());
        }
      }
      return this;
    };

    Lockstep.prototype.reset = function(callback, count) {
      var callbackEligible, key, val, _ref;
      if (callback == null) {
        callback = this.settings.reset;
      }
      this._validateArguments([[callback, 'function', 'Callback supplied is not a function.']]);
      if (this.time.run > 0) {
        callbackEligible = true;
        this.time.run = 0;
        this.count.reset++;
        this.time.start = now();
        this.time.stop = null;
      }
      if (count) {
        _ref = this.count;
        for (key in _ref) {
          val = _ref[key];
          if (val > 0) {
            callbackEligible = true;
            this.count.start = 0;
            this.count.stop = 0;
            this.count.reset = 0;
            break;
          }
        }
      }
      callbackEligible && (typeof callback === "function" ? callback(this._getInfo()) : void 0);
      return this;
    };

    Lockstep.prototype.info = function(info, callback) {
      if (callback == null) {
        callback = this.settings.info;
      }
      if (info != null) {
        this._validateArguments([[info, 'info', 'Info supplied is not valid.', 'No arguments supplied.'], [callback, 'function', 'Callback supplied is not a function.']]);
        this._adjustInfo('set', info);
        if (typeof callback === "function") {
          callback(this._getInfo());
        }
        return this;
      } else {
        return this._getInfo();
      }
    };

    Lockstep.prototype.add = function(info, callback) {
      if (callback == null) {
        callback = this.settings.add;
      }
      this._validateArguments([[info, 'info', 'Info supplied is not valid.', 'No arguments supplied.'], [callback, 'function', 'Callback supplied is not a function.']]);
      this._adjustInfo('add', info);
      if (typeof callback === "function") {
        callback(this._getInfo());
      }
      return this;
    };

    Lockstep.prototype.subtract = function(info, callback) {
      if (callback == null) {
        callback = this.settings.subtract;
      }
      this._validateArguments([[info, 'info', 'Info supplied is not valid.', 'No arguments supplied.'], [callback, 'function', 'Callback supplied is not a function.']]);
      this._adjustInfo('subtract', info);
      if (typeof callback === "function") {
        callback(this._getInfo());
      }
      return this;
    };

    Lockstep.prototype.when = function(time, callback) {
      if (callback == null) {
        callback = this.settings.when;
      }
      this._validateArguments([[time, 'time', 'Time supplied is not valid.', 'No arguments supplied.'], [callback, 'function', 'Callback supplied is not a function.', 'No callback supplied.']]);
      return this;
    };

    Lockstep.prototype.every = function(time, callback) {
      if (callback == null) {
        callback = this.settings.every;
      }
      this._validateArguments([[time, 'time', 'Time supplied is not valid.', 'No arguments supplied.'], [callback, 'function', 'Callback supplied is not a function.', 'No callback supplied.']]);
      return this;
    };

    Lockstep.prototype["while"] = function(startTime, endTime, callback) {
      if (callback == null) {
        callback = this.settings["while"];
      }
      this._validateArguments([[startTime, 'time', 'Start time supplied is not valid.', 'No arguments supplied.'], [endTime, 'time', 'End time supplied is not valid.', 'No end time supplied.'], [callback, 'function', 'Callback supplied is not a function.', 'No callback supplied.']]);
      return this;
    };

    Lockstep.prototype.during = function(startTime, endTime, startCallback, endCallback) {
      if (startCallback == null) {
        startCallback = this.settings.duringStart;
      }
      if (endCallback == null) {
        endCallback = this.settings.duringEnd;
      }
      this._validateArguments([[startTime, 'time', 'Start time supplied is not valid.', 'No arguments supplied.'], [endTime, 'time', 'End time supplied is not valid.', 'No end time supplied.'], [startCallback, 'function', 'Start callback is not a function.', 'No start callback supplied.'], [endCallback, 'function', 'End callback is not a function', 'No end callback supplied.']]);
      return this;
    };

    Lockstep.prototype.beginning = function(startTime, startCallback) {
      if (startCallback == null) {
        startCallback = this.settings.beginning;
      }
      this._validateArguments([[startTime, 'time', 'Start time supplied is not valid.', 'No arguments supplied.'], [startCallback, 'function', 'Start callback is not a function.', 'No start callback supplied.']]);
      this.during(startTime, Infinity, startCallback, NOOP);
      return this;
    };

    Lockstep.prototype.ending = function(endTime, endCallback) {
      if (endCallback == null) {
        endCallback = this.settings.ending;
      }
      this._validateArguments([[endTime, 'time', 'Time supplied is not valid.', 'No arguments supplied.'], [endCallback, 'function', 'End callback is not a function.', 'No end callback supplied.']]);
      return this;
    };

    return Lockstep;

  })();

  module.exports = Lockstep;

}).call(this);

}).call(this,_dereq_("1YiZ5S"))
},{"1YiZ5S":1,"performance-now":2,"raf":3}]},{},[5])
//# sourceMappingURL=data:application/json;base64,
(5)
});
